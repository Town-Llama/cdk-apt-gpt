const fetch = require('node-fetch');
const { OpenAI } = require('openai/index.mjs');
const groq = require('groq'); // Assuming there's a client or SDK for Groq

const RETRIES = 3;

async function callLLM(msgs){
  let attempts = 0;
  while(attempts < RETRIES) {
    try {
      attempts++;
      console.log("Attempt", attempts);
      return callOpenAI(msgs);
      // return callGroq(msgs);
    } catch (e) {
      console.log(e);
      await randomWait();
    }
  }
  throw new Error("Call Failed after retries");
}

async function callFireworks(msgs) {
  try {
    const options = {
      method: 'POST',
      headers: { 
        Authorization: 'Bearer ' + process.env.FIREWORKS_API_KEY, 
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'accounts/fireworks/models/llama-v3p1-405b-instruct',
        messages: msgs,
      })
    };

    const response = await fetch('https://api.fireworks.ai/inference/v1/chat/completions', options);
    const data = await response.json();
    return data.choices[0].message.content;
  } catch (error) {
    console.error(error);
    throw error;
  }
}

async function callGroq(msgs) {
  try {
    const chatCompletion = await groq.chat.completions.create({
      messages: msgs,
      model: 'mixtral-8x7b-32768',
      max_tokens: 1024,
      stream: false
    });
    return chatCompletion.choices[0].message.content;
  } catch (error) {
    console.error(error);
    throw error;
  }
}

async function callOpenAI(messages) {
  try {
    const openai = new OpenAI({
      apiKey: process.env.OPEN_AI_KEY,
    });
    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini', 
      messages: messages,
    });

    return response.choices[0].message.content.trim();
  } catch (error) {
    console.error('Error calling GPT-4o-Mini:', error);
    throw error;
  }
}

async function randomWait() {
    let min = 1000;
    let max = 2000;
    let ms = Math.floor(Math.random() * (max - min + 1)) + min;
    console.log("Waiting", ms);
    return new Promise(resolve => setTimeout(resolve, ms));
}

module.exports = {
  callLLM,
  callFireworks,
  callGroq,
  callOpenAI,
  randomWait,
};
